
vrs_cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c9c  08000c9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08000ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000024  08000cc8  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000058  08000cc8  00020058  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   000038b5  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000de8  00000000  00000000  00023902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000460  00000000  00000000  000246f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  00024b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b93  00000000  00000000  00024f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a3a  00000000  00000000  00026aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000284e5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001098  00000000  00000000  00028564  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000295fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	08000c84 	.word	0x08000c84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	08000c84 	.word	0x08000c84

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000248:	4b34      	ldr	r3, [pc, #208]	; (800031c <EXTI_Init+0xe0>)
 800024a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	799b      	ldrb	r3, [r3, #6]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d04f      	beq.n	80002f4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000254:	4931      	ldr	r1, [pc, #196]	; (800031c <EXTI_Init+0xe0>)
 8000256:	4b31      	ldr	r3, [pc, #196]	; (800031c <EXTI_Init+0xe0>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	43db      	mvns	r3, r3
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000264:	492d      	ldr	r1, [pc, #180]	; (800031c <EXTI_Init+0xe0>)
 8000266:	4b2d      	ldr	r3, [pc, #180]	; (800031c <EXTI_Init+0xe0>)
 8000268:	685a      	ldr	r2, [r3, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	43db      	mvns	r3, r3
 8000270:	4013      	ands	r3, r2
 8000272:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	791b      	ldrb	r3, [r3, #4]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4413      	add	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	6811      	ldr	r1, [r2, #0]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	6812      	ldr	r2, [r2, #0]
 800028a:	430a      	orrs	r2, r1
 800028c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800028e:	4923      	ldr	r1, [pc, #140]	; (800031c <EXTI_Init+0xe0>)
 8000290:	4b22      	ldr	r3, [pc, #136]	; (800031c <EXTI_Init+0xe0>)
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	43db      	mvns	r3, r3
 800029a:	4013      	ands	r3, r2
 800029c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800029e:	491f      	ldr	r1, [pc, #124]	; (800031c <EXTI_Init+0xe0>)
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <EXTI_Init+0xe0>)
 80002a2:	68da      	ldr	r2, [r3, #12]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4013      	ands	r3, r2
 80002ac:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	795b      	ldrb	r3, [r3, #5]
 80002b2:	2b10      	cmp	r3, #16
 80002b4:	d10e      	bne.n	80002d4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80002b6:	4919      	ldr	r1, [pc, #100]	; (800031c <EXTI_Init+0xe0>)
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <EXTI_Init+0xe0>)
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002c4:	4915      	ldr	r1, [pc, #84]	; (800031c <EXTI_Init+0xe0>)
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <EXTI_Init+0xe0>)
 80002c8:	68da      	ldr	r2, [r3, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4313      	orrs	r3, r2
 80002d0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002d2:	e01d      	b.n	8000310 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <EXTI_Init+0xe0>)
 80002d6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	795b      	ldrb	r3, [r3, #5]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	6811      	ldr	r1, [r2, #0]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002f2:	e00d      	b.n	8000310 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	461a      	mov	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	4413      	add	r3, r2
 80002fe:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	6811      	ldr	r1, [r2, #0]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	43d2      	mvns	r2, r2
 800030c:	400a      	ands	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
  }
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400

08000320 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <EXTI_GetITStatus+0x44>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4013      	ands	r3, r2
 8000338:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <EXTI_GetITStatus+0x44>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4013      	ands	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	d005      	beq.n	8000352 <EXTI_GetITStatus+0x32>
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800034c:	2301      	movs	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e001      	b.n	8000356 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400

08000368 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000370:	4a03      	ldr	r2, [pc, #12]	; (8000380 <EXTI_ClearITPendingBit+0x18>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6153      	str	r3, [r2, #20]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40010400 	.word	0x40010400

08000384 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	e07e      	b.n	800049e <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003a0:	2201      	movs	r2, #1
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4013      	ands	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d16d      	bne.n	8000498 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	2103      	movs	r1, #3
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	43db      	mvns	r3, r3
 80003cc:	401a      	ands	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	4619      	mov	r1, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d003      	beq.n	80003fa <GPIO_Init+0x76>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d136      	bne.n	8000468 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2103      	movs	r1, #3
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689a      	ldr	r2, [r3, #8]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	431a      	orrs	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	889b      	ldrh	r3, [r3, #4]
 800042c:	b29a      	uxth	r2, r3
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	b29b      	uxth	r3, r3
 8000432:	2101      	movs	r1, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	b29b      	uxth	r3, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	b29b      	uxth	r3, r3
 800043e:	4013      	ands	r3, r2
 8000440:	b29a      	uxth	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	889b      	ldrh	r3, [r3, #4]
 800044a:	b29b      	uxth	r3, r3
 800044c:	b21a      	sxth	r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	799b      	ldrb	r3, [r3, #6]
 8000452:	4619      	mov	r1, r3
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	b29b      	uxth	r3, r3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	b21b      	sxth	r3, r3
 800045e:	4313      	orrs	r3, r2
 8000460:	b21b      	sxth	r3, r3
 8000462:	b29a      	uxth	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	b29b      	uxth	r3, r3
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	79db      	ldrb	r3, [r3, #7]
 8000488:	4619      	mov	r1, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	3301      	adds	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	f67f af7d 	bls.w	80003a0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80004a6:	bf00      	nop
 80004a8:	371c      	adds	r7, #28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004d0:	4b5f      	ldr	r3, [pc, #380]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	2b0c      	cmp	r3, #12
 80004de:	d865      	bhi.n	80005ac <RCC_GetClocksFreq+0xfc>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <RCC_GetClocksFreq+0x38>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	0800051d 	.word	0x0800051d
 80004ec:	080005ad 	.word	0x080005ad
 80004f0:	080005ad 	.word	0x080005ad
 80004f4:	080005ad 	.word	0x080005ad
 80004f8:	0800053d 	.word	0x0800053d
 80004fc:	080005ad 	.word	0x080005ad
 8000500:	080005ad 	.word	0x080005ad
 8000504:	080005ad 	.word	0x080005ad
 8000508:	08000545 	.word	0x08000545
 800050c:	080005ad 	.word	0x080005ad
 8000510:	080005ad 	.word	0x080005ad
 8000514:	080005ad 	.word	0x080005ad
 8000518:	0800054d 	.word	0x0800054d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800051c:	4b4c      	ldr	r3, [pc, #304]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000524:	0b5b      	lsrs	r3, r3, #13
 8000526:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	3301      	adds	r3, #1
 800052c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
      break;
 800053a:	e047      	b.n	80005cc <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a45      	ldr	r2, [pc, #276]	; (8000654 <RCC_GetClocksFreq+0x1a4>)
 8000540:	601a      	str	r2, [r3, #0]
      break;
 8000542:	e043      	b.n	80005cc <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a44      	ldr	r2, [pc, #272]	; (8000658 <RCC_GetClocksFreq+0x1a8>)
 8000548:	601a      	str	r2, [r3, #0]
      break;
 800054a:	e03f      	b.n	80005cc <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800054c:	4b40      	ldr	r3, [pc, #256]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000554:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800055e:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	0c9b      	lsrs	r3, r3, #18
 8000564:	4a3d      	ldr	r2, [pc, #244]	; (800065c <RCC_GetClocksFreq+0x1ac>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	0d9b      	lsrs	r3, r3, #22
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000574:	4b36      	ldr	r3, [pc, #216]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800057c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d109      	bne.n	8000598 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <RCC_GetClocksFreq+0x1a4>)
 8000588:	fb02 f203 	mul.w	r2, r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000596:	e019      	b.n	80005cc <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <RCC_GetClocksFreq+0x1a8>)
 800059c:	fb02 f203 	mul.w	r2, r2, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
      }
      break;
 80005aa:	e00f      	b.n	80005cc <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005b4:	0b5b      	lsrs	r3, r3, #13
 80005b6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
      break;
 80005ca:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005d4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80005dc:	4a20      	ldr	r2, [pc, #128]	; (8000660 <RCC_GetClocksFreq+0x1b0>)
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005fc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <RCC_GetClocksFreq+0x1b0>)
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	40da      	lsrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <RCC_GetClocksFreq+0x1a0>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000624:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	0adb      	lsrs	r3, r3, #11
 800062a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <RCC_GetClocksFreq+0x1b0>)
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	40da      	lsrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	60da      	str	r2, [r3, #12]
}
 8000644:	bf00      	nop
 8000646:	3724      	adds	r7, #36	; 0x24
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	00f42400 	.word	0x00f42400
 8000658:	007a1200 	.word	0x007a1200
 800065c:	20000000 	.word	0x20000000
 8000660:	2000000c 	.word	0x2000000c

08000664 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d006      	beq.n	8000684 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <RCC_AHBPeriphClockCmd+0x38>)
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <RCC_AHBPeriphClockCmd+0x38>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4313      	orrs	r3, r2
 8000680:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000682:	e006      	b.n	8000692 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <RCC_AHBPeriphClockCmd+0x38>)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <RCC_AHBPeriphClockCmd+0x38>)
 8000688:	69da      	ldr	r2, [r3, #28]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	43db      	mvns	r3, r3
 800068e:	4013      	ands	r3, r2
 8000690:	61cb      	str	r3, [r1, #28]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006b6:	6a1a      	ldr	r2, [r3, #32]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006be:	e006      	b.n	80006ce <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006c0:	4905      	ldr	r1, [pc, #20]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c4:	6a1a      	ldr	r2, [r3, #32]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	43db      	mvns	r3, r3
 80006ca:	4013      	ands	r3, r2
 80006cc:	620b      	str	r3, [r1, #32]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40023800 	.word	0x40023800

080006dc <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80006dc:	b490      	push	{r4, r7}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	220f      	movs	r2, #15
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000700:	4916      	ldr	r1, [pc, #88]	; (800075c <SYSCFG_EXTILineConfig+0x80>)
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <SYSCFG_EXTILineConfig+0x80>)
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	089b      	lsrs	r3, r3, #2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	3302      	adds	r3, #2
 8000714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	43db      	mvns	r3, r3
 800071c:	401a      	ands	r2, r3
 800071e:	1c83      	adds	r3, r0, #2
 8000720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <SYSCFG_EXTILineConfig+0x80>)
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461c      	mov	r4, r3
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <SYSCFG_EXTILineConfig+0x80>)
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	3302      	adds	r3, #2
 8000738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073c:	79f9      	ldrb	r1, [r7, #7]
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	431a      	orrs	r2, r3
 800074c:	1ca3      	adds	r3, r4, #2
 800074e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bc90      	pop	{r4, r7}
 800075a:	4770      	bx	lr
 800075c:	40010000 	.word	0x40010000

08000760 <STM_EVAL_LEDInit>:
  * @param  Led: Specifies the Led to be configured. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800076a:	2301      	movs	r3, #1
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff78 	bl	8000664 <RCC_AHBPeriphClockCmd>
  
  /* Configure the GPIO pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000774:	2320      	movs	r3, #32
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000778:	2301      	movs	r3, #1
 800077a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000784:	2303      	movs	r3, #3
 8000786:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);  
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <STM_EVAL_LEDInit+0x44>)
 800078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000790:	f107 0208 	add.w	r2, r7, #8
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fdf4 	bl	8000384 <GPIO_Init>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000001c 	.word	0x2000001c

080007a8 <STM_EVAL_LEDToggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <STM_EVAL_LEDToggle+0x30>)
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	4906      	ldr	r1, [pc, #24]	; (80007d8 <STM_EVAL_LEDToggle+0x30>)
 80007be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007c2:	8a92      	ldrh	r2, [r2, #20]
 80007c4:	b292      	uxth	r2, r2
 80007c6:	2120      	movs	r1, #32
 80007c8:	404a      	eors	r2, r1
 80007ca:	b292      	uxth	r2, r2
 80007cc:	829a      	strh	r2, [r3, #20]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	2000001c 	.word	0x2000001c

080007dc <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the GPIO Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80007ec:	2304      	movs	r3, #4
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff37 	bl	8000664 <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff51 	bl	80006a0 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80007fe:	2300      	movs	r3, #0
 8000800:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <STM_EVAL_PBInit+0x94>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	f107 0218 	add.w	r2, r7, #24
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fdb2 	bl	8000384 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d120      	bne.n	8000868 <STM_EVAL_PBInit+0x8c>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000826:	2302      	movs	r3, #2
 8000828:	220d      	movs	r2, #13
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff55 	bl	80006dc <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000838:	2300      	movs	r3, #0
 800083a:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800083c:	2308      	movs	r3, #8
 800083e:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000840:	2301      	movs	r3, #1
 8000842:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fcf7 	bl	800023c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800084e:	2328      	movs	r3, #40	; 0x28
 8000850:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000852:	230f      	movs	r3, #15
 8000854:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000856:	230f      	movs	r3, #15
 8000858:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fc8a 	bl	800017c <NVIC_Init>
  }
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000020 	.word	0x20000020

08000874 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	da0b      	bge.n	80008a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000888:	490d      	ldr	r1, [pc, #52]	; (80008c0 <NVIC_SetPriority+0x4c>)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	3b04      	subs	r3, #4
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800089e:	e009      	b.n	80008b4 <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80008a0:	4908      	ldr	r1, [pc, #32]	; (80008c4 <NVIC_SetPriority+0x50>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d6:	d301      	bcc.n	80008dc <SysTick_Config+0x14>
 80008d8:	2301      	movs	r3, #1
 80008da:	e011      	b.n	8000900 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008e4:	3b01      	subs	r3, #1
 80008e6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80008e8:	210f      	movs	r1, #15
 80008ea:	f04f 30ff 	mov.w	r0, #4294967295
 80008ee:	f7ff ffc1 	bl	8000874 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <SysTick_Config+0x40>)
 80008fa:	2207      	movs	r2, #7
 80008fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	e000e010 	.word	0xe000e010

0800090c <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32l1xx.c file
     */ 
  
  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8000910:	4815      	ldr	r0, [pc, #84]	; (8000968 <main+0x5c>)
 8000912:	f7ff fdcd 	bl	80004b0 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <main+0x5c>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <main+0x60>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	099b      	lsrs	r3, r3, #6
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffd0 	bl	80008c8 <SysTick_Config>
  
  /* Initialize LED2 */
  STM_EVAL_LEDInit(LED2);
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff19 	bl	8000760 <STM_EVAL_LEDInit>
  
  /* Initialize User_Button on STM32NUCLEO */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);   
 800092e:	2101      	movs	r1, #1
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff53 	bl	80007dc <STM_EVAL_PBInit>
  
  /* Initiate Blink Speed variable */ 
  BlinkSpeed = 0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <main+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  
  /* Infinite loop */
  while (1)
  {
    /* Test on blink speed */
    if(BlinkSpeed == 0)
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main+0x64>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d106      	bne.n	8000952 <main+0x46>
    {
      /*LED2 Toggle each 50ms*/
      STM_EVAL_LEDToggle(LED2);
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff ff2f 	bl	80007a8 <STM_EVAL_LEDToggle>
      Delay(50);      
 800094a:	2032      	movs	r0, #50	; 0x32
 800094c:	f000 f812 	bl	8000974 <Delay>
 8000950:	e7f4      	b.n	800093c <main+0x30>
    }      
    else if(BlinkSpeed == 1)
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <main+0x64>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d1f0      	bne.n	800093c <main+0x30>
    {
      STM_EVAL_LEDToggle(LED2);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ff24 	bl	80007a8 <STM_EVAL_LEDToggle>
      /*LED2 Toggle each 200ms */
      Delay(200); 
 8000960:	20c8      	movs	r0, #200	; 0xc8
 8000962:	f000 f807 	bl	8000974 <Delay>
    }
  }
 8000966:	e7e9      	b.n	800093c <main+0x30>
 8000968:	20000048 	.word	0x20000048
 800096c:	10624dd3 	.word	0x10624dd3
 8000970:	20000044 	.word	0x20000044

08000974 <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <Delay+0x24>)
 8000980:	6013      	str	r3, [r2, #0]
  
  while(TimingDelay != 0);
 8000982:	bf00      	nop
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <Delay+0x24>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1fb      	bne.n	8000984 <Delay+0x10>
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000040 	.word	0x20000040

0800099c <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <TimingDelay_Decrement+0x20>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <TimingDelay_Decrement+0x20>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	4a03      	ldr	r2, [pc, #12]	; (80009bc <TimingDelay_Decrement+0x20>)
 80009b0:	6013      	str	r3, [r2, #0]
  }
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000040 	.word	0x20000040

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopFillZerobss+0x28>)
  cmp r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ea:	f000 f861 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f000 f923 	bl	8000c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff ff8b 	bl	800090c <main>
  bx lr
 80009f6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80009fc:	08000ca4 	.word	0x08000ca4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a04:	20000024 	.word	0x20000024
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000a08:	20000024 	.word	0x20000024
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000a0c:	20000058 	.word	0x20000058

08000a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>
	...

08000a14 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000a24:	e7fe      	b.n	8000a24 <HardFault_Handler+0x4>
 8000a26:	bf00      	nop

08000a28 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>
 8000a2e:	bf00      	nop

08000a30 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000a34:	e7fe      	b.n	8000a34 <BusFault_Handler+0x4>
 8000a36:	bf00      	nop

08000a38 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>
 8000a3e:	bf00      	nop

08000a40 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000a68:	f7ff ff98 	bl	800099c <TimingDelay_Decrement>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  if ((EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET))
 8000a74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a78:	f7ff fc52 	bl	8000320 <EXTI_GetITStatus>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d011      	beq.n	8000aa6 <EXTI15_10_IRQHandler+0x36>
  {
    if(BlinkSpeed == 1)
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <EXTI15_10_IRQHandler+0x3c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d103      	bne.n	8000a92 <EXTI15_10_IRQHandler+0x22>
    {
      BlinkSpeed = 0;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <EXTI15_10_IRQHandler+0x3c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e005      	b.n	8000a9e <EXTI15_10_IRQHandler+0x2e>
    }
    else
    {
      BlinkSpeed ++;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <EXTI15_10_IRQHandler+0x3c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <EXTI15_10_IRQHandler+0x3c>)
 8000a9c:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8000a9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aa2:	f7ff fc61 	bl	8000368 <EXTI_ClearITPendingBit>
  }	
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000044 	.word	0x20000044

08000ab0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <SystemInit+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <SystemInit+0x5c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000ac0:	4912      	ldr	r1, [pc, #72]	; (8000b0c <SystemInit+0x5c>)
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <SystemInit+0x5c>)
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <SystemInit+0x60>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <SystemInit+0x5c>)
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x5c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000ad6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000ada:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <SystemInit+0x5c>)
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <SystemInit+0x5c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae6:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <SystemInit+0x5c>)
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SystemInit+0x5c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000af2:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SystemInit+0x5c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000afa:	f000 f80d 	bl	8000b18 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <SystemInit+0x64>)
 8000b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b04:	609a      	str	r2, [r3, #8]
#endif
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	88ffc00c 	.word	0x88ffc00c
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSIStatus = 0, HSEStatus = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  
#ifdef PLL_SOURCE_HSI  

    /* Enable HSI */
  RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000b2a:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <SetSysClock+0x114>)
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <SetSysClock+0x114>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]
   
   /* Wait till HSI is ready and if Time out is reached exit */
  do
  {
    HSIStatus = RCC->CR & RCC_CR_HSIRDY;
 8000b36:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <SetSysClock+0x114>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
  } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <SetSysClock+0x36>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b4c:	d1f3      	bne.n	8000b36 <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <SetSysClock+0x114>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <SetSysClock+0x48>
  {
    HSIStatus = (uint32_t)0x01;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	e001      	b.n	8000b64 <SetSysClock+0x4c>
  }
  else
  {
    HSIStatus = (uint32_t)0x00;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  }
    
  if (HSIStatus == (uint32_t)0x01)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d10b      	bne.n	8000b82 <SetSysClock+0x6a>
  {
    /*  PLL configuration: PLLCLK = (HSI * 6)/3 = 32 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |RCC_CFGR_PLLDIV));
 8000b6a:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <SetSysClock+0x114>)
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <SetSysClock+0x114>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b74:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI | RCC_CFGR_PLLMUL4 | RCC_CFGR_PLLDIV2 );
 8000b76:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <SetSysClock+0x114>)
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <SetSysClock+0x114>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000b80:	6093      	str	r3, [r2, #8]

  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable 64-bit access */
  FLASH->ACR |= FLASH_ACR_ACC64;
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <SetSysClock+0x118>)
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <SetSysClock+0x118>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6013      	str	r3, [r2, #0]
  
  /* Enable Prefetch Buffer */
  FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <SetSysClock+0x118>)
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <SetSysClock+0x118>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6013      	str	r3, [r2, #0]
  
  /* Flash 1 wait state */
  FLASH->ACR |= FLASH_ACR_LATENCY;
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <SetSysClock+0x118>)
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <SetSysClock+0x118>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6013      	str	r3, [r2, #0]
  
  /* Power enable */
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SetSysClock+0x114>)
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <SetSysClock+0x114>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Select the Voltage Range 1 (1.8 V) */
  PWR->CR = PWR_CR_VOS_0;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <SetSysClock+0x11c>)
 8000bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb8:	601a      	str	r2, [r3, #0]
  
  /* Wait Until the Voltage Regulator is ready */
  while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000bba:	bf00      	nop
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <SetSysClock+0x11c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0310 	and.w	r3, r3, #16
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f9      	bne.n	8000bbc <SetSysClock+0xa4>
  {
  }
  
  /* HCLK = SYSCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <SetSysClock+0x114>)
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <SetSysClock+0x114>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	6093      	str	r3, [r2, #8]
  
  /* PCLK2 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000bd0:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <SetSysClock+0x114>)
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <SetSysClock+0x114>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	6093      	str	r3, [r2, #8]
  
  /* PCLK1 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <SetSysClock+0x114>)
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <SetSysClock+0x114>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	6093      	str	r3, [r2, #8]
  
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <SetSysClock+0x114>)
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <SetSysClock+0x114>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bea:	6013      	str	r3, [r2, #0]
  
  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bec:	bf00      	nop
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <SetSysClock+0x114>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f9      	beq.n	8000bee <SetSysClock+0xd6>
  {
  }
  
  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <SetSysClock+0x114>)
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <SetSysClock+0x114>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f023 0303 	bic.w	r3, r3, #3
 8000c04:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000c06:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <SetSysClock+0x114>)
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SetSysClock+0x114>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	6093      	str	r3, [r2, #8]
  
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000c12:	bf00      	nop
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SetSysClock+0x114>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b0c      	cmp	r3, #12
 8000c1e:	d1f9      	bne.n	8000c14 <SetSysClock+0xfc>
  {
  }
  
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40023c00 	.word	0x40023c00
 8000c34:	40007000 	.word	0x40007000

08000c38 <__libc_init_array>:
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <__libc_init_array+0x3c>)
 8000c3a:	b570      	push	{r4, r5, r6, lr}
 8000c3c:	461e      	mov	r6, r3
 8000c3e:	4c0e      	ldr	r4, [pc, #56]	; (8000c78 <__libc_init_array+0x40>)
 8000c40:	2500      	movs	r5, #0
 8000c42:	1ae4      	subs	r4, r4, r3
 8000c44:	10a4      	asrs	r4, r4, #2
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	d004      	beq.n	8000c54 <__libc_init_array+0x1c>
 8000c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c4e:	4798      	blx	r3
 8000c50:	3501      	adds	r5, #1
 8000c52:	e7f8      	b.n	8000c46 <__libc_init_array+0xe>
 8000c54:	f000 f816 	bl	8000c84 <_init>
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <__libc_init_array+0x44>)
 8000c5a:	4c09      	ldr	r4, [pc, #36]	; (8000c80 <__libc_init_array+0x48>)
 8000c5c:	461e      	mov	r6, r3
 8000c5e:	1ae4      	subs	r4, r4, r3
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	2500      	movs	r5, #0
 8000c64:	42a5      	cmp	r5, r4
 8000c66:	d004      	beq.n	8000c72 <__libc_init_array+0x3a>
 8000c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6c:	4798      	blx	r3
 8000c6e:	3501      	adds	r5, #1
 8000c70:	e7f8      	b.n	8000c64 <__libc_init_array+0x2c>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	08000c9c 	.word	0x08000c9c
 8000c78:	08000c9c 	.word	0x08000c9c
 8000c7c:	08000c9c 	.word	0x08000c9c
 8000c80:	08000ca0 	.word	0x08000ca0

08000c84 <_init>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr

08000c90 <_fini>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr
